services:
  web:
    build:
      context: ../../
      dockerfile: docker/local/Dockerfile.back
    command: /entrypoint.sh
    volumes:
      - ../../:/app
      - static_volume:/app/backend/staticfiles
      - media_volume:/app/backend/mediafiles
    ports:
      - "8060:8000"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    environment:
      - DJANGO_DEBUG=True
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1

  postgres:
    image: postgres:13-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ../../docker/local/init-scripts:/docker-entrypoint-initdb.d/
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5460:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:alpine
    volumes:
      - redis_data:/data
    ports:
      - "6360:6379"
    restart: unless-stopped
    command: redis-server --appendonly yes

  celery_worker:
    build:
      context: ../../
      dockerfile: docker/local/Dockerfile.back
    command: celery -A core worker -l debug
    volumes:
      - ../../:/app
      - static_volume:/app/backend/staticfiles
      - media_volume:/app/backend/mediafiles
    environment:
      - DJANGO_ENV=development
      - DJANGO_SETTINGS_MODULE=core.settings.development
      - DJANGO_DEBUG=True
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      web:
        condition: service_started
    restart: unless-stopped

  celery_beat:
    build:
      context: ../../
      dockerfile: docker/local/Dockerfile.back
    command: celery -A core beat -l debug --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ../../:/app
    environment:
      - DJANGO_ENV=development
      - DJANGO_SETTINGS_MODULE=core.settings.development
      - DJANGO_DEBUG=True
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      web:
        condition: service_started
    restart: unless-stopped

  flower:
    build:
      context: ../../
      dockerfile: docker/local/Dockerfile.back
    command: celery -A core flower
    ports:
      - "5560:5555"
    volumes:
      - ../../:/app
    environment:
      - DJANGO_ENV=development
      - DJANGO_SETTINGS_MODULE=core.settings.development
      - DJANGO_DEBUG=True
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      web:
        condition: service_started
    restart: unless-stopped
      
  frontend:
    build:
      context: ../../
      dockerfile: docker/local/Dockerfile.front
      args:
        NEXT_PUBLIC_BASE_URL: http://localhost:8060/api
    environment:
      - NODE_ENV=development
    ports:
      - "3060:3000"
    env_file:
      - .env
    volumes:
      - ../../frontend:/app
      - /app/node_modules
    depends_on:
      - web
    restart: unless-stopped
    command: sh -c "npm install && npx next dev"

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume: